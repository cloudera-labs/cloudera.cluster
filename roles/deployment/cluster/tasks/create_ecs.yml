# Copyright 2021 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: Generate complete ecs cluster configs
  include_role:
    name: cloudera.cluster.config.cluster.ecs

- name: Create databases and users
  include_role:
    name: cloudera.cluster.deployment.databases
  vars:
    services: "{{ cluster.ecs_databases | default(ecs_databases) }}"

# Add PVC parcel repo - assume that this has been set via REMOTE_PARCEL_REPO_URLS in the cm config. We can add this in later if needed
- name: Create ECS cluster
  cloudera.cluster.cm_api:
    endpoint: /clusters
    method: POST
    body: "{{ lookup('template', 'cluster_template/ecs/clusters.j2', convert_data=False) }}"
  register: cluster_creation_result
  failed_when: '"Status code was 400" in cluster_creation_result.msg'
  when: not cluster_template_dry_run

- name: Add hosts to ECS cluster
  cloudera.cluster.cm_api:
    endpoint: /clusters/{{ cluster.name | urlencode() }}/hosts
    method: POST
    body: "{{ lookup('template', 'cluster_template/ecs/hosts.j2', convert_data=False) }}"
  register: cluster_hosts_result
  failed_when: '"Status code was 400" in cluster_hosts_result.msg'
  when: not cluster_template_dry_run

- name: Add services to ECS cluster
  cloudera.cluster.cm_api:
    endpoint: /clusters/{{ cluster.name | urlencode() }}/services
    method: POST
    body: "{{ lookup('template', 'cluster_template/ecs/services.j2', convert_data=False) }}"
  register: cluster_services_result
  failed_when: '"Status code was 400" in cluster_services_result.msg'
  when: not cluster_template_dry_run

- name: Get CM config
  cloudera.cluster.cm_api:
    endpoint: "cm/config"
    method: GET
  register: cm_config

- set_fact:
    parcel_repos: "{{ (cm_config.json | json_query('items[?name==`REMOTE_PARCEL_REPO_URLS`].value') | default(['']))[0].split(',') | default([]) | union(cluster.repositories) }}"

- name: Update parcelrepos
  cloudera.cluster.cm_api:
    endpoint: "cm/config"
    body:
      items:
        - name: REMOTE_PARCEL_REPO_URLS
          value: "{{ parcel_repos | join(', ') }}"
    method: PUT

- name: Refresh parcel repos command
  cloudera.cluster.cm_api:
    endpoint: "/cm/commands/refreshParcelRepos"
    method: POST

- set_fact:
    new_parcel_version: "{{ products | json_query('[?product==`ECS`].version') | first }}"

- name: Start Parcel Download
  cloudera.cluster.cm_api:
    endpoint: "/clusters/{{cluster.name | urlencode() }}/parcels/products/ECS/versions/{{ new_parcel_version }}/commands/startDownload"
    method: POST

- name: Wait for parcels to download
  cloudera.cluster.cm_api:
    endpoint: /clusters/{{cluster.name | urlencode() }}/parcels/products/ECS/versions/{{ new_parcel_version }}
  register: parcels_response
  until: parcels_response.json.stage in ("DOWNLOADED", "DISTRIBUTED", "ACTIVATED")
  retries: "{{ parcel_poll_max_retries | default(30) }}"
  delay: "{{ parcel_poll_duration | default(60) }}"

- name: Start Parcel Distribution
  cloudera.cluster.cm_api:
    endpoint: "/clusters/{{cluster.name | urlencode() }}/parcels/products/ECS/versions/{{ new_parcel_version }}/commands/startDistribution"
    method: POST

- name: Wait for parcels to become distributed to all hosts
  cloudera.cluster.cm_api:
    endpoint: /clusters/{{cluster.name | urlencode() }}/parcels/products/ECS/versions/{{ new_parcel_version }}
  register: parcels_response
  until:  parcels_response.json.stage in ("DISTRIBUTED", "ACTIVATED")
  retries: "{{ parcel_poll_max_retries | default(30) }}"
  delay: "{{ parcel_poll_duration | default(60) }}"

- name: Activate Parcels
  cloudera.cluster.cm_api:
    endpoint: "/clusters/{{cluster.name | urlencode() }}/parcels/products/ECS/versions/{{ new_parcel_version }}/commands/activate"
    method: POST

- name: Wait for parcels to become distributed to all hosts
  cloudera.cluster.cm_api:
    endpoint: /clusters/{{cluster.name | urlencode() }}/parcels/products/ECS/versions/{{ new_parcel_version }}
  register: parcels_response
  until:  parcels_response.json.stage in ("ACTIVATED")
  retries: "{{ parcel_poll_max_retries | default(30) }}"
  delay: "{{ parcel_poll_duration | default(60) }}"

- name: Generate custom values
  when: cluster.controlplane_config.Database.Mode != 'embedded'
  set_fact:
    custom_values: "{{ lookup('template', 'cluster_template/ecs/controlPlaneValues.j2') | from_yaml | combine(cluster.controlplane_config, recursive=True) }}"

- name: Generate custom values - Embedded
  when: cluster.controlplane_config.Database.Mode == 'embedded'
  set_fact:
    custom_values: "{{ lookup('template', 'cluster_template/ecs/controlPlaneValuesEmbedded.j2') | from_yaml | combine(cluster.controlplane_config, recursive=True) }}"

- name: Show custom values
  debug:
    var: custom_values

- name: Install ECS Embedded Control Plane
  cloudera.cluster.cm_api:
    endpoint: /controlPlanes/commands/installEmbeddedControlPlane
    method: POST
    body:
      remoteRepoUrl: "{{ cluster.pvc_repository }}"
      experienceClusterName: "{{ cluster.name }}"
      datalakeClusterName: "{{ cluster.datalake }}"
      valuesYaml: "{{ custom_values | to_yaml }}"
  register: controlplane_response

