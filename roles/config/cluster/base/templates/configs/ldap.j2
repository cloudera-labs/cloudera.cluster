---
{% set auth_provider = auth_providers[service_auth_provider] %}
#ATLAS:
#  ATLAS_SERVER:
#    atlas_authentication_method_ldap:
#    atlas_authentication_method_ldap_ad_base_dn:
#    atlas_authentication_method_ldap_ad_bind_dn:
#    atlas_authentication_method_ldap_ad_bind_password:
#    atlas_authentication_method_ldap_ad_default_role:
#    atlas_authentication_method_ldap_ad_domain:
#    atlas_authentication_method_ldap_ad_referral:
#    atlas_authentication_method_ldap_ad_url:
#    atlas_authentication_method_ldap_ad_user_searchfilter:
#    atlas_authentication_method_ldap_base_dn:
#    atlas_authentication_method_ldap_bind_dn:
#    atlas_authentication_method_ldap_bind_password:
#    atlas_authentication_method_ldap_default_role:
#    atlas_authentication_method_ldap_groupRoleAttribute:
#    atlas_authentication_method_ldap_groupSearchBase:
#    atlas_authentication_method_ldap_groupSearchFilter:
#    atlas_authentication_method_ldap_referral:
#    atlas_authentication_method_ldap_type:
#    atlas_authentication_method_ldap_ugi_groups:
#    atlas_authentication_method_ldap_url:
#    atlas_authentication_method_ldap_userDNpattern:
#    atlas_authentication_method_ldap_user_searchfilter:
#DAS:
#  DAS_WEBAPP:
#    das_webapp_ldap_basedn:
#    das_webapp_ldap_custom_ldap_query:
#    das_webapp_ldap_domain:
#    das_webapp_ldap_group_class_key:
#    das_webapp_ldap_group_dn_pattern:
#    das_webapp_ldap_group_filter:
#    das_webapp_ldap_group_membership_key:
#    das_webapp_ldap_guid_key:
#    das_webapp_ldap_url:
#    das_webapp_ldap_user_dn_pattern:
#    das_webapp_ldap_user_filter:
#    das_webapp_ldap_user_membership_key:
#HIVE:
#  SERVICEWIDE:
#    hive_metastore_enable_ldap_auth: false
#    hive_metastore_ldap_basedn:
#    hive_metastore_ldap_domain:
#    hive_metastore_ldap_uri:
#    hiveserver2_enable_ldap_auth: false
#    hiveserver2_ldap_basedn:
#    hiveserver2_ldap_domain:
#    hiveserver2_ldap_uri:
#HIVE_LLAP:
#  SERVICEWIDE:
#    hiveserver2_enable_ldap_auth: false
#    hiveserver2_ldap_basedn:
#    hiveserver2_ldap_domain:
#    hiveserver2_ldap_uri:
#HIVE_ON_TEZ:
#  SERVICEWIDE:
#    hiveserver2_enable_ldap_auth: false
#    hiveserver2_ldap_basedn:
#    hiveserver2_ldap_domain:
#    hiveserver2_ldap_uri:
HUE:
  SERVICEWIDE:
    auth_backend: desktop.auth.backend.LdapBackend
    bind_dn: "{{ auth_provider.ldap_bind_user_dn }}"
    bind_password: "{{ auth_provider.ldap_bind_password }}"
    base_dn: "{{ auth_provider.ldap_search_base.common | default('') }}"
    create_users_on_login: true
    group_filter: "(objectClass={{ auth_provider.ldap_object_class.group }})"
    group_member_attr: "{{ auth_provider.ldap_attribute.member }}"
    group_name_attr: "{{ auth_provider.ldap_attribute.group }}"
    ldap_cert: "{{ auth_provider.ldap_cert | default(tls_chain_path) }}"
    ldap_url: "{{ auth_provider.ldap_url }}"
    search_bind_authentication: true
    use_start_tls: true
    user_filter: "(objectClass={{ auth_provider.ldap_object_class.user }})"
    user_name_attr: "{{ auth_provider.ldap_attribute.user }}"
#IMPALA:
#  SERVICEWIDE:
#    enable_ldap_auth: false
#    enable_ldap_tls: false
#    impala_ldap_uri:
#    ldap_baseDN:
#    ldap_bind_pattern:
#    ldap_domain:
#  IMPALAD:
#    impalad_ldap_ca_certificate:
#KAFKA:
#  SERVICEWIDE:
#    ldap.auth.url:
#    ldap.auth.user.dn.template:
NIFI:
  NIFI_NODE:
    nifi.ldap.authentication.strategy: LDAPS
    nifi.ldap.enabled: true
    nifi.ldap.manager.dn: "{{ auth_provider.ldap_bind_user_dn }}"
    nifi.ldap.manager.password: "{{ auth_provider.ldap_bind_password }}"
    nifi.ldap.tls.client.auth: NONE
    nifi.ldap.tls.truststore: "{{ tls_truststore_path }}"
    nifi.ldap.tls.truststore.password: "{{ tls_truststore_password }}"
    nifi.ldap.tls.truststore.type: jks
    nifi.ldap.url: "{{ auth_provider.ldap_url }}"
    nifi.ldap.user.search.base: "{{ auth_provider.ldap_search_base.user }}"
    nifi.ldap.tls.protocol: TLS
    xml.authorizers.userGroupProvider.file-user-group-provider.enabled: false
    xml.authorizers.authorizer.ranger-provider.property.User Group Provider: composite-user-group-provider
    xml.authorizers.userGroupProvider.composite-configurable-user-group-provider.enabled: false
    xml.authorizers.userGroupProvider.composite-user-group-provider.enabled: true
    xml.authorizers.userGroupProvider.composite-user-group-provider.property.User Group Provider 1: ldap-user-group-provider
    xml.authorizers.userGroupProvider.composite-user-group-provider.property.User Group Provider 2: cm-user-group-provider
    xml.authorizers.userGroupProvider.ldap-user-group-provider.property.Group Member Attribute: "{{ auth_provider.ldap_attribute.member }}"
    xml.authorizers.userGroupProvider.ldap-user-group-provider.property.Group Name Attribute: "{{ auth_provider.ldap_attribute.group }}"
    xml.authorizers.userGroupProvider.ldap-user-group-provider.property.Group Object Class: "{{ auth_provider.ldap_object_class.group }}"
    xml.authorizers.userGroupProvider.ldap-user-group-provider.property.Group Search Base: "{{ auth_provider.ldap_search_base.group }}"
    xml.authorizers.userGroupProvider.ldap-user-group-provider.property.User Group Name Attribute: "{{ auth_provider.ldap_attribute.user_member }}"
    xml.authorizers.userGroupProvider.ldap-user-group-provider.property.User Identity Attribute: "{{ auth_provider.ldap_attribute.user }}"
#RANGER:
#  RANGER_ADMIN:
#    ranger.ldap.ad.base.dn:
#    ranger.ldap.ad.bind.dn:
#    ranger.ldap.ad.domain:
#    ranger.ldap.ad.referral:
#    ranger.ldap.ad.url:
#    ranger.ldap.ad.user.searchfilter:
#    ranger.ldap.base.dn:
#    ranger.ldap.bind.dn:
#    ranger.ldap.group.roleattribute:
#    ranger.ldap.group.searchbase:
#    ranger.ldap.group.searchfilter:
#    ranger.ldap.referral:
#    ranger.ldap.url:
#    ranger.ldap.user.dnpattern:
#    ranger.ldap.user.searchfilter:
#    ranger_ldap_ad_bind_password:
#    ranger_ldap_bind_password:
RANGER:
  RANGER_USERSYNC:
    ranger.usersync.group.memberattributename: "{{ auth_provider.ldap_attribute.member }}"
    ranger.usersync.group.nameattribute: "{{ auth_provider.ldap_attribute.group }}"
    ranger.usersync.group.objectclass: "{{ auth_provider.ldap_object_class.group }}"
    ranger.usersync.group.searchbase: "{{ auth_provider.ldap_search_base.group | default('') }}"
    ranger.usersync.ldap.binddn: "{{ auth_provider.ldap_bind_user_dn }}"
    ranger.usersync.ldap.url: "{{ auth_provider.ldap_url }}"
    ranger.usersync.ldap.user.nameattribute: "{{ auth_provider.ldap_attribute.user }}"
    ranger.usersync.ldap.user.objectclass: "{{ auth_provider.ldap_object_class.user }}"
    ranger.usersync.ldap.user.searchbase: "{{ auth_provider.ldap_search_base.user | default('') }}"
    ranger_usersync_ldap_ldapbindpassword: "{{ auth_provider.ldap_bind_password }}"
#    ranger.usersync.ldap.deltasync:
#    ranger.usersync.ldap.grouphierarchylevels:
#    ranger.usersync.ldap.groupname.caseconversion:
#    ranger.usersync.ldap.referral:
#    ranger.usersync.ldap.searchBase:
#    ranger.usersync.ldap.starttls:
#    ranger.usersync.ldap.user.searchfilter:
#    ranger.usersync.ldap.username.caseconversion:
#SOLR:
#  SERVICEWIDE:
#    ldap_domain:
#    solr_enable_ldap_auth: false
#    solr_ldap_basedn:
#    solr_ldap_enable_starttls: false
#    solr_ldap_uri:
